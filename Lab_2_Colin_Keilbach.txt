//Code by: Colin Keilbach

//In c++
// using color = vec3;
//In GLSL
#define colorRGB    vec3
#define colorRGBA   vec4

//Make a gradient
vec4 myEffect0(in vec2 fragCoord, in vec2 resolution){
    
    vec4 returnColor = vec4(1.0, 0.0, 0.0, 0.0); //Returns red when there is no other effect
    
    //Change color
    //R -> Horizontal
    //G -> Vertical
    //B?
    //A?
    //returnColor = vec4(fragCoord, 0.0, 1.0);
    
    vec2 uv = fragCoord/resolution; //converts the fragCoord variables to a number between 0 - 1
    
    //returnColor = vec4(uv, 0.25, 1.0);
    
    vec3 color = vec3(uv, 0.25);
    float alpha = 1.0;
    
    returnColor = vec4(color, alpha);
    
    return returnColor;
}

//Make a checker board pattern
vec4 myEffect1(in vec2 fragCoord, in vec2 resolution, float size) { //size variable used to get the size of the squares in pizels
 	
    vec4 returnColor = vec4(0.0, 1.0, 0.0, 0.0); //Returns green when there is no other effect
    
    //Used for return color
    const vec4 BLACK = vec4(0.0, 0.0, 0.0, 0.0);
    const vec4 WHITE = vec4(1.0, 1.0, 1.0, 1.0);
    
    //Get color withe SQUARE_SIZE pixels
    //Saved as int to remove decimals and allow % use
    int xColor = int(fragCoord.x/size);
    int yColor = int(fragCoord.y/size);
    
    //Checks if the current x value is even or odd
    // even returns BLACK
    // odd returns WHITE
    if( xColor%2 == 0 ) {
        returnColor = BLACK;
    } else {
        returnColor = WHITE;
    }
    
    //Checks if the current y value is even or odd
    // even switches the current return color to the other
    //  BLACK > WHITE or WHITE > BLACK
    // odd leaves the color the same
    if( yColor%2 == 0 ) {
        if( returnColor == WHITE ) {
            returnColor = BLACK;
        } else {
            returnColor = WHITE;
        }
    }
    
    //Return color
    return returnColor;
}

//For getting the distance between two points (rh and lh)
float getDistance(vec2 rh, vec2 lh) {
    float xDistance = pow((rh.x - lh.x), 2.0); //Gets the x part of the distance
    float yDistance = pow((rh.y - lh.y), 2.0); //Gets the y part of the distance
    float pDistance = sqrt(xDistance + yDistance);    //Gets the distance from lh to rh
    
    return pDistance; //Returns the distance
}

//Make a circle in the middle of the screen
vec4 myEffect2(in vec2 fragCoord, in vec2 resolution, vec2 center, float radius, vec4 color1, vec4 color2) { //radius variable for the radius of the circle
    vec4 returnColor = vec4(0.0, 0.0, 1.0, 0.0); //Returns blue when there is no other effect
    
	float pDistance = getDistance(center, fragCoord); //Gets the distance from the current pixel to the center of the circle
    
    //This draws the circle
    if(pDistance < radius) { //pixels inside the radius are the circle
        returnColor =  color1; //The circle will be a gradient
    } else {
        returnColor = color2; //The background for the circle will be the checker board
    }
    
    return returnColor;
}

//Moving Circle Shader
vec4 myEffect3(in vec2 fragCoord, in vec2 resolution, in float time, vec2 origin, int timesRun) {
    
    vec4 returnColor = vec4(1.0, 1.0, 1.0, 1.0); //Display white when there are no other effect
    
    //Variables
    float circleGrowth = 10.0; //This is used to modify the rate that the circle grows compaired to the spiral
    //Get the center of the circle
    //This will make the circle move in a spiral over time
    float circleX = (time * cos(time)) + origin.x;
    float circleY = (time * sin(time)) + origin.y;
    vec2 circleCenter = vec2(circleX, circleY);
    
    if( timesRun % 2 == 0 ) {
   		returnColor = myEffect2(fragCoord, resolution, circleCenter, (time * circleGrowth), myEffect0(fragCoord, resolution), myEffect1(fragCoord, resolution, 8.0));
    } else {
    	returnColor = myEffect2(fragCoord, resolution, circleCenter, (time * circleGrowth), myEffect1(fragCoord, resolution, 8.0), myEffect0(fragCoord, resolution));
    }
    return returnColor;
}

//out reference for the output instead of returning something normally
void mainImage( out vec4 fragColor, in vec2 fragCoord ) //FragCoord is the current pixel
{
    //R, G, B, A = Red, Green, Blue, Alpha
    //fragColor = vec4(1.0, 1.0, 1.0, 1.0);
    //Can also be ran
    //fragColor = vec4(1.0);
    //Because it is running the same variable for each
    
    
    //fragColor = myEffect0(fragCoord, iResolution.xy); //Creates a static gradient
    
    //Variable for myEffect1
    float checkerSize = 16.0;
    //fragColor = myEffect1(fragCoord, iResolution.xy, checkerSize); //Creates a checker board pattern
    
    //Variables for myEffect2
    float circleRadius = 50.0;
    vec2 circleCenter = vec2(iResolution.x/2.0, iResolution.y/2.0); //Center of the screen
    //myEffect2(currentPixel, resolution, centerPoint, radius, myEffect0(fragCoord, resolution), myEffect1(fragCoord, resolution, 8.0));
    //fragColor = myEffect2(fragCoord, iResolution.xy, circleCenter, circleRadius); //Creates a circle
    
    
    //This will allow myEffect3 to run more than once
    float time = iTime;
    int timesRun = int(time) / 2;
    
    time = time - float(timesRun * 2);
    
    //Variables for myEffect3
    vec2 effectCenter = circleCenter; //Center of the screen
    //myEffect3(currentPixel, resolution, time, effectOrigin);
    fragColor = myEffect3(fragCoord, iResolution.xy, sqrt(time * 400.0), effectCenter, timesRun); //Custom Shader
    //sqrt(time * 900) used to make the circle grow fast in the beginning and slow at the end
    
    //Arrays
    //float myArray[6] = float[6](1.0, 2.0, 3.0, 3.0, 4.0, 5.0, 6.0);
    //myArray[0] = 1.0;
    
    //GLSL automatically converts double to float
    
/*
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy; //u is horizontal, v is vertical

    // Time varying pixel color
    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    fragColor = vec4(col,1.0);
*/
}